declare const getEventListeners = "\n// https://github.com/orstavik/getEventListeners\nconst targetToListeners = new WeakMap();\n\n//this thing returns immutable listeners\nfunction getEventListeners(target, type, phase) {\n  const allListeners = targetToListeners.get(target);\n  if (!allListeners)\n    return [];\n  if (!type && !phase)\n    return allListeners.slice();\n  if (!allListeners[type])\n    return [];\n  if (!phase || phase === Event.AT_TARGET)\n    return allListeners[type].slice();\n  if (phase === Event.CAPTURING_PHASE)\n    return allListeners[type].filter(listener => listener.capture);\n  if (phase === Event.BUBBLING_PHASE)\n    return allListeners[type].filter(listener => !listener.capture);\n  throw new Error(\"Illegal event phase for getEventListeners: phase can only be Event.BUBBLING_PHASE, Event.CAPTURING_PHASE, or Event.AT_TARGET.\");\n}\n\nfunction findEquivalentListener(registryList, listener, useCapture) {\n  return registryList.findIndex(cbOptions => cbOptions.listener === listener && cbOptions.capture === useCapture);\n}\n\nfunction makeEntry(target,type, listener, options) {\n  const entry = options instanceof Object ?\n    Object.assign({}, options, {listener, type}) :\n    {listener, type, capture: !!options};\n  entry.capture = !!entry.capture;\n  entry.bubbles = !!entry.bubbles;\n  entry.once = !!entry.once;\n  entry.passive = !!entry.passive;\n  entry.target = target;\n  //see line 96-97 in https://github.com/WebReflection/dom4/blob/master/src/event-target.js\n  Object.defineProperty(entry, \"removed\", {\n    get: function () {\n      return dynamicallyRemovedEntries.has(this);\n    }\n  });\n  Object.freeze(entry);\n  return entry;\n}\n\nfunction addListener(target, type, listener, options) {\n  let allListeners = targetToListeners.get(target);\n  if (!allListeners)\n    targetToListeners.set(target, allListeners = {});\n  let typeListeners = allListeners[type] || (allListeners[type] = []);\n  const capture = !!(options instanceof Object ? options.capture : options);\n  const index = findEquivalentListener(typeListeners, listener, capture);\n  if (index !== -1)\n    return null;\n  const entry = makeEntry(target,type, listener, options);\n  typeListeners.push(entry);\n  return entry;\n}\n\nfunction removeListener(target, type, listener, options) {\n  let allListeners = targetToListeners.get(target);\n  if (!allListeners)\n    return null;\n  let typeListeners = allListeners[type];\n  if (!typeListeners)\n    return null;\n  const capture = !!(options instanceof Object ? options.capture : options);\n  const index = findEquivalentListener(typeListeners, listener, capture);\n  if (index === -1)\n    return null;\n  return typeListeners.splice(index, 1)[0];  //mutates the list in the targetToListeners\n}\n\nconst entryToOnceCb = new WeakMap();\nconst dynamicallyRemovedEntries = new WeakSet();\n\nfunction addEventTargetRegistry(EventTargetPrototype = EventTarget.prototype) {\n  const ogAdd = EventTargetPrototype.addEventListener;\n  const ogRemove = EventTargetPrototype.removeEventListener;\n\n  function addEntry(entry){\n    let target = entry.target;\n    let type = entry.type;\n    let cb = entry.listener;\n    let options = entry;\n\n    if(entry.once){\n      options = Object.assign({}, options);\n      options.once = false;\n      cb = function(e){\n        removeEntry(entry);\n        entry.listener.call(this, e);\n      }\n      entryToOnceCb.set(entry, cb);\n    }\n    ogAdd.call(target, type, cb, options);\n  }\n\n  function removeEntry(entry){\n    let cb = entryToOnceCb.get(entry) || entry.listener;\n    ogRemove.call(entry.target, entry.type, cb, entry);\n  }\n\n  function addEventListenerRegistry(type, listener, options) {\n    const entry = addListener(this, type, listener, options);\n    if (!entry)             //addListener returns false when equivalent listener is already added.\n      return;\n    addEntry(entry);\n    //the inside of the system sees the more elaborate options object.\n    //this will break the native getListeners in dev tools, but do nothing else.\n  }\n\n  function removeEventListenerRegistry(type, listener, options) {\n    const entry = removeListener(this, type, listener, options);\n    if (!entry)  //removeListener returns false when there is no listener to be removed.\n      return;\n    dynamicallyRemovedEntries.add(entry);\n    removeEntry(entry);\n  }\n\n  Object.defineProperty(EventTargetPrototype, \"addEventListener\", {value: addEventListenerRegistry});\n  Object.defineProperty(EventTargetPrototype, \"removeEventListener\", {value: removeEventListenerRegistry});\n\n  return getEventListeners;\n}\n\nwindow.getEventListeners = addEventTargetRegistry();\n";
export default getEventListeners;
