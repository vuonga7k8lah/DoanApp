declare type Type = string;
declare type Id = number;
declare type Listener = (payload: any) => void;
interface Events<TListener> {
    [type: string]: {
        id: Id;
        listener: TListener;
    }[];
}
export default class Emitter<TType extends Type, TListener extends Listener, TPayload = any> {
    events: Events<TListener>;
    id: Id;
    emit(type: TType, payload?: TPayload): void;
    on(type: TType, listener: TListener): number;
    once(type: TType, listener: TListener): number;
    off(id: Id): void;
    offReference(type: TType, listener: TListener): void;
    offEvent(type: TType): void;
}
export {};
