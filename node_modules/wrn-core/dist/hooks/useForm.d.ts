interface Result {
    [key: string]: any;
}
export interface Field<NameT = string, ValueT = any> {
    name: NameT;
    defaultValue: ValueT;
    required?: boolean;
    maxLength?: number;
    minLength?: number;
    pattern?: RegExp;
}
export declare type Error = keyof Omit<Field, 'name' | 'defaultValue'>;
export declare type Errors<ResultT> = {
    [K in keyof ResultT]: Error;
};
export interface HandleSubmitParams<ResultT extends Result> {
    result: ResultT;
    errors: Errors<ResultT>;
    isError: boolean;
}
export declare type HandleSubmit<ResultT extends Result> = ({ result, errors, isError }: HandleSubmitParams<ResultT>) => void;
export declare function useForm<ResultT extends Result>(): {
    onChange: <FieldT extends Field<keyof ResultT, ResultT[FieldT["name"]]>>(field: FieldT) => (value: ResultT[FieldT["name"]]) => void;
    onSubmit: <EventT extends unknown>(handleSubmit: HandleSubmit<ResultT>) => (event: EventT) => void;
    errors: Errors<ResultT>;
};
export {};
