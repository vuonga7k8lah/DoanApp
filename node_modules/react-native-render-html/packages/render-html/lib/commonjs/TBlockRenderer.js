"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.TDefaultBlockRenderer = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _TChildrenRendererContext = require("./context/TChildrenRendererContext");

var _mergeCollapsedMargins = _interopRequireDefault(require("./helpers/mergeCollapsedMargins"));

var _GenericPressable = _interopRequireDefault(require("./GenericPressable"));

var _RenderRegistryProvider = require("./context/RenderRegistryProvider");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const TDefaultBlockRenderer = ({
  tnode,
  children: overridingChildren,
  hasAnchorAncestor,
  style,
  onPress,
  viewProps,
  key
}) => {
  const TNodeChildrenRenderer = (0, _TChildrenRendererContext.useTNodeChildrenRenderer)();
  const children = overridingChildren !== null && overridingChildren !== void 0 ? overridingChildren : /*#__PURE__*/_react.default.createElement(TNodeChildrenRenderer, {
    tnode: tnode,
    hasAnchorAncestor: hasAnchorAncestor
  });
  const commonProps = { ...viewProps,
    style: (viewProps === null || viewProps === void 0 ? void 0 : viewProps.style) ? [viewProps.style, style] : style,
    key,
    testID: tnode.tagName || undefined
  };

  if (typeof onPress === 'function') {
    return /*#__PURE__*/_react.default.createElement(_GenericPressable.default, {
      onPress,
      ...commonProps
    }, children);
  }

  return /*#__PURE__*/_react.default.createElement(_reactNative.View, commonProps, children);
};

exports.TDefaultBlockRenderer = TDefaultBlockRenderer;

const TBlockRenderer = ({
  tnode,
  key,
  hasAnchorAncestor,
  collapsedMarginTop
}) => {
  var _ref;

  const {
    Default,
    Custom
  } = (0, _RenderRegistryProvider.useRendererConfig)(tnode);
  const commonProps = {
    key,
    tnode,
    style: (0, _mergeCollapsedMargins.default)(collapsedMarginTop, { ...tnode.styles.nativeBlockFlow,
      ...tnode.styles.nativeBlockRet
    }),
    textProps: {},
    viewProps: {},
    type: 'text',
    hasAnchorAncestor,
    TDefaultRenderer: TDefaultBlockRenderer,
    DefaultTagRenderer: Default || TDefaultBlockRenderer
  };
  const Root = (_ref = Custom !== null && Custom !== void 0 ? Custom : Default) !== null && _ref !== void 0 ? _ref : TDefaultBlockRenderer;
  return /*#__PURE__*/_react.default.createElement(Root, commonProps);
};

var _default = TBlockRenderer;
exports.default = _default;
//# sourceMappingURL=TBlockRenderer.js.map