{"version":3,"sources":["TTextRenderer.tsx"],"names":["TDefaultTextRenderer","tnode","textProps","onPress","children","style","resolvedStyles","tagName","undefined","data","TStandardTextRenderer","key","hasAnchorAncestor","Default","Custom","styles","nativeBlockFlow","nativeBlockRet","nativeTextFlow","nativeTextRet","commonProps","viewProps","type","TDefaultRenderer","DefaultTagRenderer","Root","React","createElement","TTextRenderer","props","InternalTextRenderer"],"mappings":";;;;;;;;AAAA;;AACA;;AAUA;;AAIA;;;;;;AAEO,MAAMA,oBAA6C,GAAG,CAAC;AAC5DC,EAAAA,KAD4D;AAE5DC,EAAAA,SAF4D;AAG5DC,EAAAA,OAH4D;AAI5DC,EAAAA,QAJ4D;AAK5DC,EAAAA;AAL4D,CAAD,KAMzB;AAClC,QAAMC,cAAc,GAAG,CAAAJ,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAEG,KAAX,IAAmB,CAACA,KAAD,EAAQH,SAAS,CAACG,KAAlB,CAAnB,GAA8CA,KAArE;AACA,sBACE,6BAAC,iBAAD;AACE,IAAA,OAAO,EAAEF;AADX,KAEMD,SAFN;AAGE,IAAA,KAAK,EAAEI,cAHT;AAIE,IAAA,MAAM,EAAEL,KAAK,CAACM,OAAN,IAAiBC;AAJ3B,MAKGJ,QALH,aAKGA,QALH,cAKGA,QALH,GAKeH,KAAK,CAACQ,IALrB,CADF;AASD,CAjBM;;;;AAmBP,SAASC,qBAAT,CAA+B;AAC7BT,EAAAA,KAD6B;AAE7BU,EAAAA,GAF6B;AAG7BC,EAAAA;AAH6B,CAA/B,EAIqC;AAAA;;AACnC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAsB,+CAAkBb,KAAlB,CAA5B;AACA,QAAMC,SAAS,GAAG,6CAAlB;AACA,QAAMG,KAAK,GAAG,EACZ,GAAGJ,KAAK,CAACc,MAAN,CAAaC,eADJ;AAEZ,OAAGf,KAAK,CAACc,MAAN,CAAaE,cAFJ;AAGZ,OAAGhB,KAAK,CAACc,MAAN,CAAaG,cAHJ;AAIZ,OAAGjB,KAAK,CAACc,MAAN,CAAaI;AAJJ,GAAd;AAMA,QAAMC,WAA0C,GAAG;AACjDT,IAAAA,GAAG,EAAEA,GAD4C;AAEjDV,IAAAA,KAAK,EAAEA,KAF0C;AAGjDI,IAAAA,KAHiD;AAIjDO,IAAAA,iBAJiD;AAKjDV,IAAAA,SALiD;AAMjDmB,IAAAA,SAAS,EAAE,EANsC;AAOjDC,IAAAA,IAAI,EAAE,MAP2C;AAQjDC,IAAAA,gBAAgB,EAAEvB,oBAR+B;AASjDwB,IAAAA,kBAAkB,EAChBX,OAAO,IAAKb;AAVmC,GAAnD;AAYA,QAAMyB,IAAI,WAAIX,MAAJ,aAAIA,MAAJ,cAAIA,MAAJ,GAAcD,OAAd,uCAAyBb,oBAAnC;AAGA,sBAAO0B,eAAMC,aAAN,CAAoBF,IAApB,EAA0BL,WAA1B,CAAP;AACD;;AAEc,SAASQ,aAAT,CAAuBC,KAAvB,EAAgE;AAC7E,QAAMC,oBAAoB,GAAG,qDAAwBD,KAAK,CAAC5B,KAA9B,CAA7B;;AACA,MAAI6B,oBAAJ,EAA0B;AACxB,wBAAOJ,eAAMC,aAAN,CAAoBG,oBAApB,EAA0C;AAAEnB,MAAAA,GAAG,EAAEkB,KAAK,CAAClB;AAAb,KAA1C,CAAP;AACD;;AACD,sBAAOe,eAAMC,aAAN,CAAoBjB,qBAApB,EAA2CmB,KAA3C,CAAP;AACD","sourcesContent":["import React from 'react';\nimport { Text } from 'react-native';\nimport { TText } from '@native-html/transient-render-engine';\nimport {\n  CustomTagRenderer,\n  CustomTagRendererProps,\n  DefaultTagRenderer,\n  TDefaultRenderer,\n  TDefaultRendererProps,\n  TNodeGenericRendererProps\n} from './shared-types';\nimport {\n  useInternalTextRenderer,\n  useRendererConfig\n} from './context/RenderRegistryProvider';\nimport { useSharedTextProps } from './context/SharedPropsContext';\n\nexport const TDefaultTextRenderer: TDefaultRenderer<TText> = ({\n  tnode,\n  textProps,\n  onPress,\n  children,\n  style\n}: TDefaultRendererProps<TText>) => {\n  const resolvedStyles = textProps?.style ? [style, textProps.style] : style;\n  return (\n    <Text\n      onPress={onPress}\n      {...textProps}\n      style={resolvedStyles}\n      testID={tnode.tagName || undefined}>\n      {children ?? tnode.data}\n    </Text>\n  );\n};\n\nfunction TStandardTextRenderer({\n  tnode,\n  key,\n  hasAnchorAncestor\n}: TNodeGenericRendererProps<TText>) {\n  const { Default, Custom } = useRendererConfig(tnode);\n  const textProps = useSharedTextProps();\n  const style = {\n    ...tnode.styles.nativeBlockFlow,\n    ...tnode.styles.nativeBlockRet,\n    ...tnode.styles.nativeTextFlow,\n    ...tnode.styles.nativeTextRet\n  };\n  const commonProps: CustomTagRendererProps<TText> = {\n    key: key,\n    tnode: tnode,\n    style,\n    hasAnchorAncestor,\n    textProps,\n    viewProps: {},\n    type: 'text',\n    TDefaultRenderer: TDefaultTextRenderer,\n    DefaultTagRenderer:\n      Default || (TDefaultTextRenderer as DefaultTagRenderer<TText>)\n  };\n  const Root = (Custom ?? Default ?? TDefaultTextRenderer) as CustomTagRenderer<\n    TText\n  >;\n  return React.createElement(Root, commonProps);\n}\n\nexport default function TTextRenderer(props: TNodeGenericRendererProps<TText>) {\n  const InternalTextRenderer = useInternalTextRenderer(props.tnode);\n  if (InternalTextRenderer) {\n    return React.createElement(InternalTextRenderer, { key: props.key });\n  }\n  return React.createElement(TStandardTextRenderer, props);\n}\n"]}