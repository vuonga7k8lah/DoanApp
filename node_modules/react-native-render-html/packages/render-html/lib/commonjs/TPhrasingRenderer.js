"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.TDefaultPhrasingRenderer = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _SharedPropsContext = require("./context/SharedPropsContext");

var _TChildrenRendererContext = require("./context/TChildrenRendererContext");

var _mergeCollapsedMargins = _interopRequireDefault(require("./helpers/mergeCollapsedMargins"));

var _RenderRegistryProvider = require("./context/RenderRegistryProvider");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const TDefaultPhrasingRenderer = ({
  tnode,
  key,
  style,
  children: overridingChildren,
  hasAnchorAncestor,
  textProps
}) => {
  const TNodeChildrenRenderer = (0, _TChildrenRendererContext.useTNodeChildrenRenderer)();
  const resolvedStyles = (textProps === null || textProps === void 0 ? void 0 : textProps.style) ? [textProps.style, style] : style;
  const children = overridingChildren !== null && overridingChildren !== void 0 ? overridingChildren : /*#__PURE__*/_react.default.createElement(TNodeChildrenRenderer, {
    tnode: tnode,
    hasAnchorAncestor: hasAnchorAncestor
  });
  return /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
    key,
    ...textProps,
    style: resolvedStyles,
    testID: tnode.tagName || undefined
  }, children);
};

exports.TDefaultPhrasingRenderer = TDefaultPhrasingRenderer;

const TPhrasingRenderer = ({
  tnode,
  key,
  hasAnchorAncestor,
  collapsedMarginTop
}) => {
  var _ref;

  const textProps = (0, _SharedPropsContext.useSharedTextProps)();
  const {
    Default,
    Custom
  } = (0, _RenderRegistryProvider.useRendererConfig)(tnode);
  const style = (0, _mergeCollapsedMargins.default)(collapsedMarginTop, { ...tnode.styles.nativeBlockFlow,
    ...tnode.styles.nativeBlockRet,
    ...tnode.styles.nativeTextFlow,
    ...tnode.styles.nativeTextRet
  });
  const commonProps = {
    key,
    tnode,
    style,
    hasAnchorAncestor,
    textProps,
    viewProps: {},
    type: 'text',
    TDefaultRenderer: TDefaultPhrasingRenderer,
    DefaultTagRenderer: Default || TDefaultPhrasingRenderer
  };
  const Root = (_ref = Custom !== null && Custom !== void 0 ? Custom : Default) !== null && _ref !== void 0 ? _ref : TDefaultPhrasingRenderer;
  return /*#__PURE__*/_react.default.createElement(Root, commonProps);
};

var _default = TPhrasingRenderer;
exports.default = _default;
//# sourceMappingURL=TPhrasingRenderer.js.map