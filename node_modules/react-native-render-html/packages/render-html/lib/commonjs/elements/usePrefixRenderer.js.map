{"version":3,"sources":["usePrefixRenderer.tsx"],"names":["TextualPrefixRenderer","color","fontSize","prefix","textAlign","useViewPrefixRendererStyles","props","shrinkFactor","prefixSize","prefixStyle","width","height","top","lineHeight","BASESLINE_OFFSET_MULTI","Platform","select","android","default","DiscPrefixRenderer","style","borderRadius","backgroundColor","CirclePrefixRenderer","borderColor","borderWidth","SquarePrefixRenderer","React","createElement","View","LowerAlphaPrefixRenderer","index","UpperAlphaPrefixRenderer","NoPrefixRenderer","DecimalPrefixRenderer","prefixRenderersMap","none","Component","computeStrSize","disc","circle","square","decimal","length","usePrefixRenderer","listStyleType","defaultListType"],"mappings":"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","sourcesContent":["/* eslint-disable react-native/no-inline-styles */\nimport { Platform, Text, View } from 'react-native';\nimport React, { ComponentType } from 'react';\nimport numOfCharsInPrefix from './numOfCharsInPrefix';\nimport { getStringPrefixFromIndex } from './getStringListPrefixFromIndex';\nimport { TNode } from '@native-html/transient-render-engine';\n\nexport interface HTMLListElementProps {\n  listStyleType: SupportedListStyleType;\n  tnode: TNode;\n  paddingLeft: number;\n  fontSize: number;\n  color: string;\n  lineHeight: number;\n  tagName?: string;\n}\n\ninterface ListPrefixRendererProps {\n  color?: string;\n  fontSize: number;\n  lineHeight: number;\n  index: number;\n  nestLevel: number;\n}\n\nconst TextualPrefixRenderer = ({\n  color,\n  fontSize,\n  prefix\n}: Pick<ListPrefixRendererProps, 'color' | 'fontSize'> & {\n  prefix: string;\n}) => {\n  return (\n    <Text\n      selectable={false}\n      style={{\n        color: color,\n        fontSize: fontSize,\n        textAlign: 'right'\n      }}\n      children={prefix}\n    />\n  );\n};\n\nfunction useViewPrefixRendererStyles(\n  props: ListPrefixRendererProps,\n  shrinkFactor = 1\n) {\n  const prefixSize = props.fontSize / (shrinkFactor * 2.8);\n  return {\n    prefixSize,\n    prefixStyle: {\n      width: prefixSize,\n      height: prefixSize,\n      top:\n        (props.lineHeight - prefixSize) / 2 +\n        props.fontSize * BASESLINE_OFFSET_MULTI\n    }\n  };\n}\n\nconst BASESLINE_OFFSET_MULTI = Platform.select({ android: 0.1, default: 0 });\n\nconst DiscPrefixRenderer = (props: ListPrefixRendererProps) => {\n  const { prefixSize, prefixStyle } = useViewPrefixRendererStyles(props);\n  const style = {\n    borderRadius: prefixSize,\n    backgroundColor: props.color,\n    ...prefixStyle\n  };\n  return <View style={style} />;\n};\n\nconst CirclePrefixRenderer = (props: ListPrefixRendererProps) => {\n  const { prefixSize, prefixStyle } = useViewPrefixRendererStyles(props);\n  const style = {\n    borderColor: props.color,\n    borderWidth: prefixSize / 10,\n    borderRadius: prefixSize,\n    ...prefixStyle\n  };\n  return <View style={style} />;\n};\n\nconst SquarePrefixRenderer = (props: ListPrefixRendererProps) => {\n  const { prefixStyle } = useViewPrefixRendererStyles(props, 1.2);\n  return React.createElement(View, {\n    style: {\n      backgroundColor: props.color,\n      ...prefixStyle\n    }\n  });\n};\n\nconst LowerAlphaPrefixRenderer = ({\n  color,\n  fontSize,\n  index\n}: ListPrefixRendererProps) => {\n  return (\n    <TextualPrefixRenderer\n      color={color}\n      fontSize={fontSize}\n      prefix={getStringPrefixFromIndex(index, 97, 26) + '.'}\n    />\n  );\n};\n\nconst UpperAlphaPrefixRenderer = ({\n  color,\n  fontSize,\n  index\n}: ListPrefixRendererProps) => {\n  return (\n    <TextualPrefixRenderer\n      color={color}\n      fontSize={fontSize}\n      prefix={getStringPrefixFromIndex(index, 65, 26) + '.'}\n    />\n  );\n};\n\nconst NoPrefixRenderer = () => null;\n\nconst DecimalPrefixRenderer = ({\n  color,\n  fontSize,\n  index\n}: ListPrefixRendererProps) => {\n  return (\n    <TextualPrefixRenderer\n      color={color}\n      fontSize={fontSize}\n      prefix={index + 1 + '.'}\n    />\n  );\n};\n\ninterface PrefixSepcs {\n  Component: ComponentType<ListPrefixRendererProps>;\n  computeStrSize(length: number): number;\n}\n\nconst prefixRenderersMap: Record<SupportedListStyleType, PrefixSepcs> = ({\n  none: {\n    Component: NoPrefixRenderer,\n    computeStrSize: () => 0\n  },\n  disc: {\n    Component: DiscPrefixRenderer,\n    computeStrSize: () => 1\n  },\n  circle: {\n    Component: CirclePrefixRenderer,\n    computeStrSize: () => 1\n  },\n  square: {\n    Component: SquarePrefixRenderer,\n    computeStrSize: () => 1\n  },\n  decimal: {\n    Component: DecimalPrefixRenderer,\n    computeStrSize: (length) => numOfCharsInPrefix(length, 10)\n  },\n  'lower-alpha': {\n    Component: LowerAlphaPrefixRenderer,\n    computeStrSize: (length) => numOfCharsInPrefix(length, 26)\n  },\n  'upper-alpha': {\n    Component: UpperAlphaPrefixRenderer,\n    computeStrSize: (length) => numOfCharsInPrefix(length, 26)\n  }\n} as Partial<Record<SupportedListStyleType, PrefixSepcs>>) as Record<\n  SupportedListStyleType,\n  PrefixSepcs\n>;\n\nexport type SupportedListStyleType =\n  | 'none'\n  | 'disc'\n  | 'circle'\n  | 'square'\n  | 'decimal'\n  | 'decimal-leading-zero'\n  | 'lower-roman'\n  | 'upper-roman'\n  | 'lower-greek'\n  | 'lower-alpha'\n  | 'lower-latin'\n  | 'upper-alpha'\n  | 'upper-latin'\n  | 'disclosure-open'\n  | 'disclosure-closed';\n\nexport interface HTMLListPrefixProps {\n  listStyleType?: string;\n  defaultListType: string;\n}\n\nexport default function usePrefixRenderer({\n  listStyleType,\n  defaultListType\n}: HTMLListPrefixProps): PrefixSepcs {\n  return (\n    prefixRenderersMap[listStyleType as SupportedListStyleType] ||\n    defaultListType\n  );\n}\n"]}