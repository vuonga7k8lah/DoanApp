"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = usePrefixRenderer;

var _reactNative = require("react-native");

var _react = _interopRequireDefault(require("react"));

var _numOfCharsInPrefix = _interopRequireDefault(require("./numOfCharsInPrefix"));

var _getStringListPrefixFromIndex = require("./getStringListPrefixFromIndex");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable react-native/no-inline-styles */
const TextualPrefixRenderer = ({
  color,
  fontSize,
  prefix
}) => {
  return /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
    selectable: false,
    style: {
      color: color,
      fontSize: fontSize,
      textAlign: 'right'
    },
    children: prefix
  });
};

function useViewPrefixRendererStyles(props, shrinkFactor = 1) {
  const prefixSize = props.fontSize / (shrinkFactor * 2.8);
  return {
    prefixSize,
    prefixStyle: {
      width: prefixSize,
      height: prefixSize,
      top: (props.lineHeight - prefixSize) / 2 + props.fontSize * BASESLINE_OFFSET_MULTI
    }
  };
}

const BASESLINE_OFFSET_MULTI = _reactNative.Platform.select({
  android: 0.1,
  default: 0
});

const DiscPrefixRenderer = props => {
  const {
    prefixSize,
    prefixStyle
  } = useViewPrefixRendererStyles(props);
  const style = {
    borderRadius: prefixSize,
    backgroundColor: props.color,
    ...prefixStyle
  };
  return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: style
  });
};

const CirclePrefixRenderer = props => {
  const {
    prefixSize,
    prefixStyle
  } = useViewPrefixRendererStyles(props);
  const style = {
    borderColor: props.color,
    borderWidth: prefixSize / 10,
    borderRadius: prefixSize,
    ...prefixStyle
  };
  return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: style
  });
};

const SquarePrefixRenderer = props => {
  const {
    prefixStyle
  } = useViewPrefixRendererStyles(props, 1.2);
  return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: {
      backgroundColor: props.color,
      ...prefixStyle
    }
  });
};

const LowerAlphaPrefixRenderer = ({
  color,
  fontSize,
  index
}) => {
  return /*#__PURE__*/_react.default.createElement(TextualPrefixRenderer, {
    color: color,
    fontSize: fontSize,
    prefix: (0, _getStringListPrefixFromIndex.getStringPrefixFromIndex)(index, 97, 26) + '.'
  });
};

const UpperAlphaPrefixRenderer = ({
  color,
  fontSize,
  index
}) => {
  return /*#__PURE__*/_react.default.createElement(TextualPrefixRenderer, {
    color: color,
    fontSize: fontSize,
    prefix: (0, _getStringListPrefixFromIndex.getStringPrefixFromIndex)(index, 65, 26) + '.'
  });
};

const NoPrefixRenderer = () => null;

const DecimalPrefixRenderer = ({
  color,
  fontSize,
  index
}) => {
  return /*#__PURE__*/_react.default.createElement(TextualPrefixRenderer, {
    color: color,
    fontSize: fontSize,
    prefix: index + 1 + '.'
  });
};

const prefixRenderersMap = {
  none: {
    Component: NoPrefixRenderer,
    computeStrSize: () => 0
  },
  disc: {
    Component: DiscPrefixRenderer,
    computeStrSize: () => 1
  },
  circle: {
    Component: CirclePrefixRenderer,
    computeStrSize: () => 1
  },
  square: {
    Component: SquarePrefixRenderer,
    computeStrSize: () => 1
  },
  decimal: {
    Component: DecimalPrefixRenderer,
    computeStrSize: length => (0, _numOfCharsInPrefix.default)(length, 10)
  },
  'lower-alpha': {
    Component: LowerAlphaPrefixRenderer,
    computeStrSize: length => (0, _numOfCharsInPrefix.default)(length, 26)
  },
  'upper-alpha': {
    Component: UpperAlphaPrefixRenderer,
    computeStrSize: length => (0, _numOfCharsInPrefix.default)(length, 26)
  }
};

function usePrefixRenderer({
  listStyleType,
  defaultListType
}) {
  return prefixRenderersMap[listStyleType] || defaultListType;
}
//# sourceMappingURL=usePrefixRenderer.js.map