{"version":3,"sources":["HTMLListElement.tsx"],"names":["styles","StyleSheet","create","row","flexDirection","flexWrap","alignItems","HTMLListElement","tnode","TDefaultRenderer","hasAnchorAncestor","defaultListType","style","props","TChildrenRenderer","prefixRenderer","listStyleType","webTextFlow","fontSize","nativeTextFlow","color","lineHeight","prefixMarginRight","prefixLength","computeStrSize","children","length","bulletWidth","paddingLeft","nativeBlockRet","Math","max","PrefixRenderer","Component","prefixContainerStyle","width","marginLeft","marginRight","height","renderChild","childElement","key","index"],"mappings":"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","sourcesContent":["import { StyleSheet, View, ViewStyle } from 'react-native';\nimport React from 'react';\nimport { TBlock } from '@native-html/transient-render-engine';\nimport { DefaultTagRendererProps } from '../shared-types';\nimport type { TChildProps } from '../TChildrenRenderer';\nimport { useTChildrenRenderer } from '../context/TChildrenRendererContext';\nimport usePrefixRenderer, { SupportedListStyleType } from './usePrefixRenderer';\n\nconst styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row',\n    flexWrap: 'nowrap',\n    alignItems: 'flex-start'\n  }\n});\n\nexport interface HTMLListElementProps extends DefaultTagRendererProps<TBlock> {\n  defaultListType: SupportedListStyleType;\n}\n\nexport default function HTMLListElement({\n  tnode,\n  TDefaultRenderer,\n  hasAnchorAncestor,\n  defaultListType,\n  style,\n  ...props\n}: HTMLListElementProps) {\n  // Map children to horizontal rows with prefixes\n  const TChildrenRenderer = useTChildrenRenderer();\n  const prefixRenderer = usePrefixRenderer({\n    listStyleType: tnode.styles.webTextFlow.listStyleType,\n    defaultListType\n  });\n  const fontSize = tnode.styles.nativeTextFlow.fontSize || 14;\n  const color = tnode.styles.nativeTextFlow.color as string;\n  const lineHeight = tnode.styles.nativeTextFlow.lineHeight || 16.8;\n  const prefixMarginRight = fontSize / 2;\n  const prefixLength = prefixRenderer.computeStrSize(tnode.children.length);\n  const bulletWidth = (fontSize || 12) * prefixLength;\n  const paddingLeft =\n    typeof tnode.styles.nativeBlockRet.paddingLeft === 'number'\n      ? Math.max(\n          tnode.styles.nativeBlockRet.paddingLeft,\n          bulletWidth + prefixMarginRight\n        )\n      : bulletWidth + prefixMarginRight;\n  const PrefixRenderer = prefixRenderer.Component;\n  const prefixContainerStyle: ViewStyle = {\n    width: bulletWidth,\n    marginLeft: -(bulletWidth + prefixMarginRight),\n    marginRight: prefixMarginRight,\n    height: lineHeight,\n    alignItems: 'flex-end'\n  };\n  const renderChild = ({ childElement, key, index }: TChildProps) => (\n    <View key={key} style={styles.row}>\n      <View style={prefixContainerStyle}>\n        <PrefixRenderer\n          index={index}\n          nestLevel={0}\n          color={color}\n          fontSize={fontSize}\n          lineHeight={lineHeight}\n        />\n      </View>\n      {childElement}\n    </View>\n  );\n  return (\n    <TDefaultRenderer\n      hasAnchorAncestor={hasAnchorAncestor}\n      tnode={tnode}\n      style={[style, { paddingLeft }]}\n      {...props}>\n      <TChildrenRenderer\n        tchildren={tnode.children}\n        hasAnchorAncestor={hasAnchorAncestor}\n        renderChild={renderChild}\n      />\n    </TDefaultRenderer>\n  );\n}\n"]}