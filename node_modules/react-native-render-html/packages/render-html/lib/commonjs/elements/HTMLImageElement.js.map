{"version":3,"sources":["HTMLImageElement.tsx"],"names":["defaultImageStyle","resizeMode","emptyObject","styles","StyleSheet","create","image","errorBox","borderWidth","borderColor","overflow","justifyContent","errorText","textAlign","fontStyle","container","flexDirection","alignSelf","extractImgStyleProps","attemptParseFloat","value","result","parseFloat","Number","isNaN","normalizeSize","dimension","options","containerDimension","enablePercentWidth","undefined","search","parsedFloat","trim","match","extractHorizontalSpace","marginHorizontal","leftMargin","rightMargin","margin","realLeftMargin","realRightMargin","derivePhysicalDimensionsFromProps","width","height","contentWidth","enableExperimentalPercentWidth","normalizeOptionsWidth","normalizeOptionsHeight","widthProp","heightProp","deriveRequiredDimensionsFromProps","flatStyle","physicalDimensionsFromProps","styleWidth","styleHeight","scaleUp","minDimensions","desiredDimensions","aspectRatio","scaleDown","maxDimensions","scale","minBox","maxBox","originalBox","sourcesAreEqual","source1","source2","uri","identity","arg","computeImageBoxDimensions","params","computeImagesMaxWidth","flattenStyles","imagePhysicalWidth","imagePhysicalHeight","requiredWidth","requiredHeight","horizontalSpace","maxWidth","Infinity","maxHeight","minWidth","minHeight","imagesMaxWidth","Math","min","HTMLImageElement","PureComponent","constructor","props","invalidateRequirements","state","__cachedPhysicalDimensionsFromProps","__cachedRequirements","imageBoxDimensions","error","style","__cachedFlattenStyles","flatten","componentDidMount","mounted","fetchPhysicalImageDimensions","componentWillUnmount","componentDidUpdate","prevProps","prevState","sourceHasChanged","source","requirementsHaveChanged","shouldRecomputeImageBox","setState","shouldFetchFromImgAPI","Image","getSize","renderImage","imageStyles","renderAlt","imagesInitialDimensions","alt","color","altColor","renderPlaceholder","renderContent","imgStyles","render","remainingStyle","onPress","PropTypes","object","isRequired","string","oneOfType","number","array","func","bool","shape","testID"],"mappings":"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","sourcesContent":["import React, { ComponentClass, PureComponent } from 'react';\nimport {\n  Image,\n  View,\n  Text,\n  StyleSheet,\n  ImageStyle,\n  PressableProps,\n  StyleProp\n} from 'react-native';\nimport PropTypes from 'prop-types';\nimport GenericPressable from '../GenericPressable';\nimport { ImageDimensions } from '../shared-types';\nimport pick from 'ramda/src/pick';\n\nexport interface ImgDimensions {\n  width: number;\n  height: number;\n}\n\nexport interface IncompleteImgDimensions {\n  width: number | null;\n  height: number | null;\n}\n\nexport interface HTMLImageElementProps {\n  source: any;\n  alt?: string;\n  height?: string | number;\n  width?: string | number;\n  style: StyleProp<ImageStyle>;\n  testID?: string;\n  computeImagesMaxWidth?: (containerWidth: number) => number;\n  onPress?: PressableProps['onPress'];\n  altColor?: string;\n  contentWidth: number;\n  enableExperimentalPercentWidth?: boolean;\n  imagesInitialDimensions: ImgDimensions;\n}\n\nconst defaultImageStyle: ImageStyle = { resizeMode: 'cover' };\nconst emptyObject = {};\n\nconst styles = StyleSheet.create({\n  image: { resizeMode: 'cover' },\n  errorBox: {\n    borderWidth: 1,\n    borderColor: 'lightgray',\n    overflow: 'hidden',\n    justifyContent: 'center'\n  },\n  errorText: { textAlign: 'center', fontStyle: 'italic' },\n  container: {\n    flexDirection: 'row',\n    alignSelf: 'stretch',\n    justifyContent: 'center'\n  }\n});\n\nconst extractImgStyleProps = pick<keyof ImageStyle>([\n  'resizeMode',\n  'tintColor',\n  'overlayColor'\n]);\n\nfunction attemptParseFloat(value: any) {\n  const result = parseFloat(value);\n  return Number.isNaN(result) ? null : result;\n}\n\nfunction normalizeSize(\n  dimension: string | number | null | undefined,\n  options: Partial<{\n    containerDimension: number | null;\n    enablePercentWidth: boolean;\n  }> = {}\n) {\n  const containerDimension = options.containerDimension || null;\n  const enablePercentWidth = options.enablePercentWidth || false;\n  if (\n    dimension === null ||\n    dimension === undefined ||\n    Number.isNaN(dimension)\n  ) {\n    return null;\n  }\n  if (typeof dimension === 'number') {\n    return dimension;\n  }\n  if (typeof dimension === 'string') {\n    if (\n      dimension.search('%') !== -1 &&\n      enablePercentWidth &&\n      typeof containerDimension === 'number'\n    ) {\n      const parsedFloat = attemptParseFloat(dimension);\n      if (parsedFloat === null || Number.isNaN(parsedFloat)) {\n        return null;\n      }\n      return (parsedFloat * containerDimension) / 100;\n    } else if (dimension.trim().match(/^[\\d.]+$/)) {\n      return attemptParseFloat(dimension);\n    }\n  }\n  return null;\n}\n\nfunction extractHorizontalSpace({\n  marginHorizontal,\n  leftMargin,\n  rightMargin,\n  margin\n}: any = {}) {\n  const realLeftMargin = leftMargin || marginHorizontal || margin || 0;\n  const realRightMargin = rightMargin || marginHorizontal || margin || 0;\n  return realLeftMargin + realRightMargin;\n}\n\nfunction derivePhysicalDimensionsFromProps({\n  width,\n  height,\n  contentWidth,\n  enableExperimentalPercentWidth: enablePercentWidth\n}: HTMLImageElementProps): IncompleteImgDimensions {\n  const normalizeOptionsWidth = {\n    enablePercentWidth,\n    containerDimension: contentWidth\n  };\n  const normalizeOptionsHeight = {\n    enablePercentWidth: false\n  };\n  const widthProp = normalizeSize(width, normalizeOptionsWidth);\n  const heightProp = normalizeSize(height, normalizeOptionsHeight);\n  return {\n    width: widthProp,\n    height: heightProp\n  };\n}\n\nfunction deriveRequiredDimensionsFromProps({\n  enablePercentWidth,\n  contentWidth,\n  flatStyle,\n  physicalDimensionsFromProps\n}: Pick<HTMLImageElementProps, 'contentWidth'> & {\n  flatStyle: Record<string, any>;\n  enablePercentWidth?: boolean;\n  physicalDimensionsFromProps: IncompleteImgDimensions;\n}): IncompleteImgDimensions {\n  const normalizeOptionsWidth = {\n    enablePercentWidth,\n    containerDimension: contentWidth\n  };\n  const normalizeOptionsHeight = {\n    enablePercentWidth: false\n  };\n  const styleWidth = normalizeSize(flatStyle.width, normalizeOptionsWidth);\n  const styleHeight = normalizeSize(flatStyle.height, normalizeOptionsHeight);\n  return {\n    width:\n      typeof styleWidth === 'number'\n        ? styleWidth\n        : physicalDimensionsFromProps.width,\n    height:\n      typeof styleHeight === 'number'\n        ? styleHeight\n        : physicalDimensionsFromProps.height\n  };\n}\n\nfunction scaleUp(\n  minDimensions: ImgDimensions,\n  desiredDimensions: ImgDimensions\n): ImgDimensions {\n  const aspectRatio = desiredDimensions.width / desiredDimensions.height;\n  if (desiredDimensions.width < minDimensions.width) {\n    return scaleUp(minDimensions, {\n      width: minDimensions.width,\n      height: minDimensions.width / aspectRatio\n    });\n  }\n  if (desiredDimensions.height < minDimensions.height) {\n    return scaleUp(minDimensions, {\n      height: minDimensions.height,\n      width: minDimensions.height * aspectRatio\n    });\n  }\n  return desiredDimensions;\n}\n\nfunction scaleDown(\n  maxDimensions: ImgDimensions,\n  desiredDimensions: ImgDimensions\n): ImgDimensions {\n  const aspectRatio = desiredDimensions.width / desiredDimensions.height;\n  if (desiredDimensions.width > maxDimensions.width) {\n    return scaleDown(maxDimensions, {\n      width: maxDimensions.width,\n      height: maxDimensions.width / aspectRatio\n    });\n  }\n  if (desiredDimensions.height > maxDimensions.height) {\n    return scaleDown(maxDimensions, {\n      height: maxDimensions.height,\n      width: maxDimensions.height * aspectRatio\n    });\n  }\n  return desiredDimensions;\n}\n\nfunction scale(\n  { minBox, maxBox }: { minBox: ImgDimensions; maxBox: ImgDimensions },\n  originalBox: ImgDimensions\n) {\n  return scaleDown(maxBox, scaleUp(minBox, originalBox));\n}\n\nfunction sourcesAreEqual(source1: any, source2: any) {\n  return (\n    (source1 && source2 && source1.uri === source2.uri) || source1 === source2\n  );\n}\n\nfunction identity(arg: any) {\n  return arg;\n}\n\nfunction computeImageBoxDimensions(params: any) {\n  const {\n    computeImagesMaxWidth,\n    contentWidth,\n    flattenStyles,\n    imagePhysicalWidth,\n    imagePhysicalHeight,\n    requiredWidth,\n    requiredHeight\n  } = params;\n  const horizontalSpace = extractHorizontalSpace(flattenStyles);\n  const {\n    maxWidth = Infinity,\n    maxHeight = Infinity,\n    minWidth = 0,\n    minHeight = 0\n  } = flattenStyles;\n  const imagesMaxWidth =\n    typeof contentWidth === 'number'\n      ? computeImagesMaxWidth(contentWidth)\n      : Infinity;\n  const minBox = {\n    width: minWidth,\n    height: minHeight\n  };\n  const maxBox = {\n    width:\n      Math.min(\n        imagesMaxWidth,\n        maxWidth,\n        typeof requiredWidth === 'number' ? requiredWidth : Infinity\n      ) - horizontalSpace,\n    height: Math.min(\n      typeof requiredHeight === 'number' ? requiredHeight : Infinity,\n      maxHeight\n    )\n  };\n  if (typeof requiredWidth === 'number' && typeof requiredHeight === 'number') {\n    return scale(\n      { minBox, maxBox },\n      {\n        width: requiredWidth,\n        height: requiredHeight\n      }\n    );\n  }\n  if (imagePhysicalWidth != null && imagePhysicalHeight != null) {\n    return scale(\n      { minBox, maxBox },\n      {\n        width: imagePhysicalWidth,\n        height: imagePhysicalHeight\n      }\n    );\n  }\n  return null;\n}\n\ninterface State {\n  requiredWidth: number | null;\n  requiredHeight: number | null;\n  imagePhysicalWidth: number | null;\n  imagePhysicalHeight: number | null;\n  imageBoxDimensions: ImageDimensions | null;\n  error: boolean;\n}\n\nconst HTMLImageElement = class HTMLImageElement extends PureComponent<\n  HTMLImageElementProps,\n  State\n> {\n  private __cachedFlattenStyles!: Record<string, any>;\n  private __cachedRequirements!: IncompleteImgDimensions;\n  private __cachedPhysicalDimensionsFromProps!: IncompleteImgDimensions;\n  private mounted = false;\n\n  constructor(props: HTMLImageElementProps) {\n    super(props);\n    this.invalidateRequirements(props);\n    const state = {\n      imagePhysicalWidth: this.__cachedPhysicalDimensionsFromProps.width,\n      imagePhysicalHeight: this.__cachedPhysicalDimensionsFromProps.height,\n      requiredWidth: this.__cachedRequirements.width,\n      requiredHeight: this.__cachedRequirements.height,\n      imageBoxDimensions: null,\n      error: false\n    };\n    this.state = {\n      ...state,\n      imageBoxDimensions: this.computeImageBoxDimensions(props, state)\n    };\n  }\n\n  static propTypes: Record<keyof HTMLImageElementProps, any> = {\n    source: PropTypes.object.isRequired,\n    alt: PropTypes.string,\n    height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    style: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    computeImagesMaxWidth: PropTypes.func.isRequired,\n    contentWidth: PropTypes.number,\n    enableExperimentalPercentWidth: PropTypes.bool,\n    imagesInitialDimensions: PropTypes.shape({\n      width: PropTypes.number,\n      height: PropTypes.number\n    }),\n    altColor: PropTypes.string,\n    onPress: PropTypes.func,\n    testID: PropTypes.string\n  };\n\n  static defaultProps: Partial<HTMLImageElementProps> = {\n    enableExperimentalPercentWidth: false,\n    computeImagesMaxWidth: identity,\n    imagesInitialDimensions: {\n      width: 100,\n      height: 100\n    },\n    style: {}\n  };\n\n  invalidateRequirements(props: HTMLImageElementProps) {\n    const { contentWidth, enableExperimentalPercentWidth, style } = props;\n    const physicalDimensionsFromProps = derivePhysicalDimensionsFromProps(\n      props\n    );\n    this.__cachedFlattenStyles = StyleSheet.flatten(style) || emptyObject;\n    this.__cachedPhysicalDimensionsFromProps = physicalDimensionsFromProps;\n    this.__cachedRequirements = deriveRequiredDimensionsFromProps({\n      contentWidth,\n      enablePercentWidth: enableExperimentalPercentWidth,\n      flatStyle: this.__cachedFlattenStyles,\n      physicalDimensionsFromProps\n    });\n  }\n\n  computeImageBoxDimensions(props: HTMLImageElementProps, state: any) {\n    const { computeImagesMaxWidth, contentWidth } = props;\n    const {\n      imagePhysicalWidth,\n      imagePhysicalHeight,\n      requiredWidth,\n      requiredHeight\n    } = state;\n    const imageBoxDimensions = computeImageBoxDimensions({\n      flattenStyles: this.__cachedFlattenStyles,\n      computeImagesMaxWidth,\n      contentWidth,\n      imagePhysicalWidth,\n      imagePhysicalHeight,\n      requiredWidth,\n      requiredHeight\n    });\n    return imageBoxDimensions;\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n    this.fetchPhysicalImageDimensions();\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  componentDidUpdate(prevProps: HTMLImageElementProps, prevState: State) {\n    const sourceHasChanged = !sourcesAreEqual(\n      prevProps.source,\n      this.props.source\n    );\n    const requirementsHaveChanged =\n      prevProps.width !== this.props.width ||\n      prevProps.height !== this.props.height ||\n      prevProps.style !== this.props.style;\n    const shouldRecomputeImageBox =\n      requirementsHaveChanged ||\n      this.state.imagePhysicalWidth !== prevState.imagePhysicalWidth ||\n      this.state.imagePhysicalHeight !== prevState.imagePhysicalHeight ||\n      this.props.contentWidth !== prevProps.contentWidth ||\n      this.props.computeImagesMaxWidth !== prevProps.computeImagesMaxWidth;\n\n    if (requirementsHaveChanged) {\n      this.invalidateRequirements(this.props);\n      // eslint-disable-next-line react/no-did-update-set-state\n      this.setState({\n        requiredWidth: this.__cachedRequirements!.width,\n        requiredHeight: this.__cachedRequirements!.height\n      });\n    }\n    if (sourceHasChanged) {\n      if (\n        this.__cachedRequirements!.width === null ||\n        this.__cachedRequirements!.height === null\n      ) {\n        this.fetchPhysicalImageDimensions();\n      }\n    }\n    if (shouldRecomputeImageBox) {\n      // eslint-disable-next-line react/no-did-update-set-state\n      this.setState((state: any, props: HTMLImageElementProps) => ({\n        imageBoxDimensions: this.computeImageBoxDimensions(props, state)\n      }));\n    }\n  }\n\n  fetchPhysicalImageDimensions(props = this.props) {\n    const { source } = props;\n    const shouldFetchFromImgAPI = !!source?.uri;\n    if (\n      this.__cachedPhysicalDimensionsFromProps.width != null &&\n      this.__cachedPhysicalDimensionsFromProps.height != null\n    ) {\n      this.setState({\n        imagePhysicalWidth: this.__cachedPhysicalDimensionsFromProps.width,\n        imagePhysicalHeight: this.__cachedPhysicalDimensionsFromProps.height\n      });\n    } else if (shouldFetchFromImgAPI) {\n      Image.getSize(\n        source.uri,\n        (imagePhysicalWidth, imagePhysicalHeight) => {\n          this.mounted &&\n            this.setState({\n              imagePhysicalWidth,\n              imagePhysicalHeight,\n              error: false\n            });\n        },\n        () => {\n          this.mounted && this.setState({ error: true });\n        }\n      );\n    }\n  }\n\n  renderImage(imageBoxDimensions: ImgDimensions, imageStyles: ImageStyle) {\n    const { source } = this.props;\n    return (\n      <Image\n        source={source}\n        onError={() => this.setState({ error: true })}\n        style={[defaultImageStyle, imageBoxDimensions, imageStyles]}\n        testID=\"image-layout\"\n      />\n    );\n  }\n\n  renderAlt() {\n    const imageBoxDimensions = this.computeImageBoxDimensions(\n      this.props,\n      this.state\n    );\n    return (\n      <View\n        style={[\n          styles.errorBox,\n          {\n            height:\n              imageBoxDimensions?.height ||\n              this.props.imagesInitialDimensions.height,\n            width:\n              imageBoxDimensions?.width ||\n              this.props.imagesInitialDimensions.width\n          }\n        ]}\n        testID=\"image-error\">\n        {this.props.alt ? (\n          <Text style={[styles.errorText, { color: this.props.altColor }]}>\n            {this.props.alt}\n          </Text>\n        ) : (\n          false\n        )}\n      </View>\n    );\n  }\n\n  renderPlaceholder() {\n    return (\n      <View\n        style={this.props.imagesInitialDimensions}\n        testID=\"image-placeholder\"\n      />\n    );\n  }\n\n  renderContent(imgStyles: ImageStyle) {\n    const { error, imageBoxDimensions } = this.state;\n    if (error) {\n      return this.renderAlt();\n    }\n    if (imageBoxDimensions === null) {\n      return this.renderPlaceholder();\n    }\n    return this.renderImage(imageBoxDimensions, imgStyles);\n  }\n\n  render() {\n    const { width, height, ...remainingStyle } = this.__cachedFlattenStyles;\n    const imgStyles = extractImgStyleProps(remainingStyle);\n    const style = [styles.container, remainingStyle];\n    if (this.props.onPress) {\n      return (\n        <GenericPressable onPress={this.props.onPress} style={style}>\n          {this.renderContent(imgStyles)}\n        </GenericPressable>\n      );\n    }\n    return <View style={style}>{this.renderContent(imgStyles)}</View>;\n  }\n} as ComponentClass<Partial<HTMLImageElementProps>>;\n\nexport default HTMLImageElement;\n"]}