{"version":3,"sources":["AnchorRenderer.tsx"],"names":["extractAnchorOnLinkPress","tnode","onLinkPress","href","attributes","shouldHandleLinkPress","tagName","e","undefined","useAnchorProps","props","syntheticAnchorOnLinkPress","onPress","AnchorRenderer","React","createElement","TDefaultRenderer","model","defaultHTMLElementModels","a"],"mappings":";;;;;;;AAAA;;AAEA;;AAOA;;;;AAKA,SAASA,wBAAT,CACEC,KADF,EAEEC,WAFF,EAGE;AACA,QAAMC,IAAY,GAAGF,KAAK,CAACG,UAAN,CAAiBD,IAAtC;AACA,QAAME,qBAAqB,GACzBJ,KAAK,CAACK,OAAN,KAAkB,GAAlB,IACA,OAAOH,IAAP,KAAgB,QADhB,IAEA,OAAOD,WAAP,KAAuB,UAHzB;AAIA,SAAOG,qBAAqB,GACvBE,CAAD,IAA8BL,WAAW,CAAEK,CAAF,EAAKJ,IAAL,EAAWF,KAAK,CAACG,UAAjB,CADjB,GAExBI,SAFJ;AAGD;;AAED,SAASC,cAAT,CACEC,KADF,EAE6E;AAC3E,QAAM;AAAET,IAAAA;AAAF,MAAYS,KAAlB;AACA,QAAM;AAAER,IAAAA;AAAF,MAAkB,yCAAxB;AACA,QAAMS,0BAA0B,GAAGX,wBAAwB,CACzDC,KADyD,EAEzDC,WAFyD,CAA3D;;AAIA,MAAI,OAAOS,0BAAP,KAAsC,UAA1C,EAAsD;AACpD,WAAOD,KAAP;AACD;;AACD,SAAO,EACL,GAAGA,KADE;AAELE,IAAAA,OAAO,EAAED;AAFJ,GAAP;AAID;;AAED,MAAME,cAAoC,GAAIH,KAAD,IAAW;AACtD,sBAAOI,eAAMC,aAAN,CAAoBL,KAAK,CAACM,gBAA1B,EAA4CP,cAAc,CAACC,KAAD,CAA1D,CAAP;AACD,CAFD;;AAIAG,cAAc,CAACI,KAAf,GAAuBC,gDAAyBC,CAAhD;eAEeN,c","sourcesContent":["import React from 'react';\nimport { DefaultMixedRenderer } from '../render/render-types';\nimport {\n  TBlock,\n  TNode,\n  TPhrasing,\n  TText,\n  defaultHTMLElementModels\n} from '@native-html/transient-render-engine';\nimport { useSharedProps } from '../context/SharedPropsContext';\nimport { GenericPressableProps } from '../GenericPressable';\nimport { RenderHTMLPassedProps, TDefaultRendererProps } from '../shared-types';\nimport { GestureResponderEvent } from 'react-native';\n\nfunction extractAnchorOnLinkPress(\n  tnode: TBlock | TPhrasing | TText,\n  onLinkPress: RenderHTMLPassedProps['onLinkPress']\n) {\n  const href: string = tnode.attributes.href;\n  const shouldHandleLinkPress =\n    tnode.tagName === 'a' &&\n    typeof href === 'string' &&\n    typeof onLinkPress === 'function';\n  return shouldHandleLinkPress\n    ? (e: GestureResponderEvent) => onLinkPress!(e, href, tnode.attributes)\n    : undefined;\n}\n\nfunction useAnchorProps<T extends TNode>(\n  props: TDefaultRendererProps<T>\n): TDefaultRendererProps<T> & { onPress?: GenericPressableProps['onPress'] } {\n  const { tnode } = props;\n  const { onLinkPress } = useSharedProps();\n  const syntheticAnchorOnLinkPress = extractAnchorOnLinkPress(\n    tnode,\n    onLinkPress\n  );\n  if (typeof syntheticAnchorOnLinkPress !== 'function') {\n    return props;\n  }\n  return {\n    ...props,\n    onPress: syntheticAnchorOnLinkPress\n  };\n}\n\nconst AnchorRenderer: DefaultMixedRenderer = (props) => {\n  return React.createElement(props.TDefaultRenderer, useAnchorProps(props));\n};\n\nAnchorRenderer.model = defaultHTMLElementModels.a;\n\nexport default AnchorRenderer;\n"]}