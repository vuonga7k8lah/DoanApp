{"version":3,"sources":["ImageRenderer.tsx"],"names":["normalizeUri","uri","startsWith","ImageRenderer","props","style","tnode","TDefaultRenderer","onPress","contentWidth","computeImagesMaxWidth","enableExperimentalPercentWidth","imagesInitialDimensions","src","attributes","React","createElement","alt","styles","nativeTextFlow","color","width","height","model","defaultHTMLElementModels","img"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AAEA;;;;AAEA,SAASA,YAAT,CAAsBC,GAAtB,EAAmC;AACjC,SAAOA,GAAG,CAACC,UAAJ,CAAe,IAAf,oBAAgCD,GAAhC,IAAwCA,GAA/C;AACD;;AAED,MAAME,aAAmC,GAAIC,KAAD,IAAW;AACrD,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,KAAT;AAAgBC,IAAAA,gBAAhB;AAAkCC,IAAAA;AAAlC,MAA8CJ,KAApD;AACA,QAAM;AACJK,IAAAA,YADI;AAEJC,IAAAA,qBAFI;AAGJC,IAAAA,8BAHI;AAIJC,IAAAA;AAJI,MAKF,yCALJ;AAMA,QAAMC,GAAG,GAAGP,KAAK,CAACQ,UAAN,CAAiBD,GAA7B;;AACA,MAAI,CAACA,GAAL,EAAU;AACR,wBAAOE,eAAMC,aAAN,CAAoBT,gBAApB,EAAsCH,KAAtC,CAAP;AACD;;AACD,sBACE,6BAAC,yBAAD;AACE,IAAA,GAAG,EAAEE,KAAK,CAACQ,UAAN,CAAiBG,GADxB;AAEE,IAAA,MAAM,EAAC,KAFT;AAGE,IAAA,QAAQ,EAAEX,KAAK,CAACY,MAAN,CAAaC,cAAb,CAA4BC,KAHxC;AAIE,IAAA,YAAY,EAAEX,YAJhB;AAKE,IAAA,qBAAqB,EAAEC,qBALzB;AAME,IAAA,8BAA8B,EAAEC,8BANlC;AAOE,IAAA,uBAAuB,EAAEC,uBAP3B;AAQE,IAAA,OAAO,EAAEJ,OARX;AASE,IAAA,MAAM,EAAE;AAAEP,MAAAA,GAAG,EAAED,YAAY,CAACa,GAAD;AAAnB,KATV;AAUE,IAAA,KAAK,EAAER,KAVT;AAWE,IAAA,KAAK,EAAEC,KAAK,CAACQ,UAAN,CAAiBO,KAX1B;AAYE,IAAA,MAAM,EAAEf,KAAK,CAACQ,UAAN,CAAiBQ;AAZ3B,IADF;AAgBD,CA5BD;;AA8BAnB,aAAa,CAACoB,KAAd,GAAsBC,gDAAyBC,GAA/C;eAEetB,a","sourcesContent":["import React from 'react';\nimport HTMLImageElement from '../elements/HTMLImageElement';\nimport { DefaultBlockRenderer } from '../render/render-types';\nimport { useSharedProps } from '../context/SharedPropsContext';\nimport { ImageStyle } from 'react-native';\nimport { defaultHTMLElementModels } from '@native-html/transient-render-engine';\n\nfunction normalizeUri(uri: string) {\n  return uri.startsWith('//') ? `https:${uri}` : uri;\n}\n\nconst ImageRenderer: DefaultBlockRenderer = (props) => {\n  const { style, tnode, TDefaultRenderer, onPress } = props;\n  const {\n    contentWidth,\n    computeImagesMaxWidth,\n    enableExperimentalPercentWidth,\n    imagesInitialDimensions\n  } = useSharedProps();\n  const src = tnode.attributes.src;\n  if (!src) {\n    return React.createElement(TDefaultRenderer, props);\n  }\n  return (\n    <HTMLImageElement\n      alt={tnode.attributes.alt}\n      testID=\"img\"\n      altColor={tnode.styles.nativeTextFlow.color as string}\n      contentWidth={contentWidth as number}\n      computeImagesMaxWidth={computeImagesMaxWidth}\n      enableExperimentalPercentWidth={enableExperimentalPercentWidth}\n      imagesInitialDimensions={imagesInitialDimensions}\n      onPress={onPress}\n      source={{ uri: normalizeUri(src) }}\n      style={style as ImageStyle}\n      width={tnode.attributes.width}\n      height={tnode.attributes.height}\n    />\n  );\n};\n\nImageRenderer.model = defaultHTMLElementModels.img;\n\nexport default ImageRenderer;\n"]}