{"version":3,"sources":["RenderRegistry.ts"],"names":["internalTextRenderers","br","LineBreakRenderer","wbr","WordBreakRenderer","RenderRegistry","constructor","customRenderers","Object","keys","forEach","key","getInternalTextRenderer","tagName","getRendererConfigForTNode","tnode","Custom","getCustomRendererForTNode","Default","getDefaultRendererForTNode","defaultRenderers","renderer","rendererModel","model","defaultHTMLElementModels","matchContentModel","contentModel","__DEV__","console","warn","displayName"],"mappings":";;;;;;;AAAA;;AAMA;;AACA;;AACA;;AAEA;;;;;;AAMA,MAAMA,qBAAkE,GAAG;AACzEC,EAAAA,EAAE,EAAEC,0BADqE;AAEzEC,EAAAA,GAAG,EAAEC;AAFoE,CAA3E;;AAUe,MAAMC,cAAN,CAAqB;AAGlCC,EAAAA,WAAW,CAACC,eAAwC,GAAG,EAA5C,EAAgD;AAAA,6CAFC,EAED;;AACzD;AACAC,IAAAA,MAAM,CAACC,IAAP,CAAYF,eAAe,IAAI,EAA/B,EAAmCG,OAAnC,CAA4CC,GAAD,IAAS;AAClD,UAAI,OAAOJ,eAAe,CAACI,GAAD,CAAtB,KAAgC,UAApC,EAAgD;AAC9C,aAAKJ,eAAL,CAAqBI,GAArB,IAA4BJ,eAAe,CAACI,GAAD,CAA3C;AACD;AACF,KAJD;AAKD;;AAEDC,EAAAA,uBAAuB,CAACC,OAAD,EAAyB;AAC9C,QAAI,2BAAab,qBAAb,EAAoCa,OAApC,CAAJ,EAAkD;AAChD,aAAOb,qBAAqB,CAACa,OAAD,CAA5B;AACD;;AACD,WAAO,IAAP;AACD;;AAEDC,EAAAA,yBAAyB,CAAkBC,KAAlB,EAA+C;AACtE,WAAO;AACLC,MAAAA,MAAM,EAAE,KAAKC,yBAAL,CAA+BF,KAA/B,CADH;AAELG,MAAAA,OAAO,EAAE,KAAKC,0BAAL,CAAgCJ,KAAhC;AAFJ,KAAP;AAID;;AAEOI,EAAAA,0BAAR,CACEJ,KADF,EAEgC;AAC9B,QAAI,2BAAaK,yBAAb,EAA+BL,KAAK,CAACF,OAArC,CAAJ,EAAmD;AACjD,aAAOO,0BAAiBL,KAAK,CAACF,OAAvB,CAAP;AACD;;AACD,WAAO,IAAP;AACD;;AAEOI,EAAAA,yBAAR,CACEF,KADF,EAEmD;AACjD,QAAI,2BAAa,KAAKR,eAAlB,EAAmCQ,KAAK,CAACF,OAAzC,CAAJ,EAAuD;AAAA;;AACrD,YAAMQ,QAAQ,GAAG,KAAKd,eAAL,CAAqBQ,KAAK,CAACF,OAA3B,CAAjB;AACA,YAAMA,OAAO,GAAGE,KAAK,CAACF,OAAtB;AACA,YAAMS,aAAa,sBACjBD,QAAQ,CAACE,KADQ,6DAEhB,2BAAaC,+CAAb,EAAuCX,OAAvC,IACGW,gDAAyBX,OAAzB,CADH,GAEG,IAJN;;AAKA,UACES,aAAa,IACbP,KAAK,CAACU,iBAAN,CAAwBH,aAAa,CAACI,YAAtC,CAFF,EAGE;AACA,eAAOL,QAAP;AACD,OALD,MAKO;AACLM,QAAAA,OAAO,IACLC,OAAO,CAACC,IAAR,0CACmCd,KAAK,CAACF,OADzC,0BAC8DE,KAAK,CAACe,WADpE,sEAC0IR,aAD1I,aAC0IA,aAD1I,uBAC0IA,aAAa,CAAEI,YADzJ,2CACqMX,KAAK,CAACe,WAD3M,8CADF;AAID;;AACD,aAAO,IAAP;AACD;;AACD,WAAO,IAAP;AACD;;AA5DiC","sourcesContent":["import {\n  defaultHTMLElementModels,\n  TNode\n} from '@native-html/transient-render-engine';\nimport { ComponentType } from 'react';\nimport { CustomTagRendererProps } from '..';\nimport lookupRecord from '../helpers/lookupRecord';\nimport LineBreakRenderer from '../renderers/LineBreakRenderer';\nimport WordBreakRenderer from '../renderers/WordBreakRenderer';\nimport { CustomTagRenderer, DefaultTagRenderer } from '../shared-types';\nimport defaultRenderers from './defaultRenderers';\nimport {\n  CustomTagRendererRecord,\n  InternalTextContentRenderer\n} from './render-types';\n\nconst internalTextRenderers: Record<string, InternalTextContentRenderer> = {\n  br: LineBreakRenderer,\n  wbr: WordBreakRenderer\n};\n\nexport interface RendererConfig<T extends TNode> {\n  Default: DefaultTagRenderer<T> | null;\n  Custom: CustomTagRenderer<T> | null;\n}\n\nexport default class RenderRegistry {\n  private readonly customRenderers: CustomTagRendererRecord = {};\n\n  constructor(customRenderers: CustomTagRendererRecord = {}) {\n    // Filter model-only components\n    Object.keys(customRenderers || {}).forEach((key) => {\n      if (typeof customRenderers[key] === 'function') {\n        this.customRenderers[key] = customRenderers[key];\n      }\n    });\n  }\n\n  getInternalTextRenderer(tagName: string | null) {\n    if (lookupRecord(internalTextRenderers, tagName)) {\n      return internalTextRenderers[tagName];\n    }\n    return null;\n  }\n\n  getRendererConfigForTNode<T extends TNode>(tnode: T): RendererConfig<T> {\n    return {\n      Custom: this.getCustomRendererForTNode(tnode),\n      Default: this.getDefaultRendererForTNode(tnode)\n    };\n  }\n\n  private getDefaultRendererForTNode<T extends TNode>(\n    tnode: T\n  ): DefaultTagRenderer<T> | null {\n    if (lookupRecord(defaultRenderers, tnode.tagName)) {\n      return defaultRenderers[tnode.tagName] as any;\n    }\n    return null;\n  }\n\n  private getCustomRendererForTNode<T extends TNode>(\n    tnode: T\n  ): ComponentType<CustomTagRendererProps<T>> | null {\n    if (lookupRecord(this.customRenderers, tnode.tagName)) {\n      const renderer = this.customRenderers[tnode.tagName];\n      const tagName = tnode.tagName;\n      const rendererModel =\n        renderer.model ??\n        (lookupRecord(defaultHTMLElementModels, tagName)\n          ? defaultHTMLElementModels[tagName]\n          : null);\n      if (\n        rendererModel &&\n        tnode.matchContentModel(rendererModel.contentModel)\n      ) {\n        return renderer as any;\n      } else {\n        __DEV__ &&\n          console.warn(\n            `You are attempting to render \"${tnode.tagName}\" of type \"${tnode.displayName}\", but the registered renderer is of content model type ${rendererModel?.contentModel} which is incompatible with \"${tnode.displayName}\". The custom renderer will be ignored.`\n          );\n      }\n      return null;\n    }\n    return null;\n  }\n}\n"]}