"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _transientRenderEngine = require("@native-html/transient-render-engine");

var _lookupRecord = _interopRequireDefault(require("../helpers/lookupRecord"));

var _LineBreakRenderer = _interopRequireDefault(require("../renderers/LineBreakRenderer"));

var _WordBreakRenderer = _interopRequireDefault(require("../renderers/WordBreakRenderer"));

var _defaultRenderers = _interopRequireDefault(require("./defaultRenderers"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const internalTextRenderers = {
  br: _LineBreakRenderer.default,
  wbr: _WordBreakRenderer.default
};

class RenderRegistry {
  constructor(customRenderers = {}) {
    _defineProperty(this, "customRenderers", {});

    // Filter model-only components
    Object.keys(customRenderers || {}).forEach(key => {
      if (typeof customRenderers[key] === 'function') {
        this.customRenderers[key] = customRenderers[key];
      }
    });
  }

  getInternalTextRenderer(tagName) {
    if ((0, _lookupRecord.default)(internalTextRenderers, tagName)) {
      return internalTextRenderers[tagName];
    }

    return null;
  }

  getRendererConfigForTNode(tnode) {
    return {
      Custom: this.getCustomRendererForTNode(tnode),
      Default: this.getDefaultRendererForTNode(tnode)
    };
  }

  getDefaultRendererForTNode(tnode) {
    if ((0, _lookupRecord.default)(_defaultRenderers.default, tnode.tagName)) {
      return _defaultRenderers.default[tnode.tagName];
    }

    return null;
  }

  getCustomRendererForTNode(tnode) {
    if ((0, _lookupRecord.default)(this.customRenderers, tnode.tagName)) {
      var _renderer$model;

      const renderer = this.customRenderers[tnode.tagName];
      const tagName = tnode.tagName;
      const rendererModel = (_renderer$model = renderer.model) !== null && _renderer$model !== void 0 ? _renderer$model : (0, _lookupRecord.default)(_transientRenderEngine.defaultHTMLElementModels, tagName) ? _transientRenderEngine.defaultHTMLElementModels[tagName] : null;

      if (rendererModel && tnode.matchContentModel(rendererModel.contentModel)) {
        return renderer;
      } else {
        __DEV__ && console.warn("You are attempting to render \"".concat(tnode.tagName, "\" of type \"").concat(tnode.displayName, "\", but the registered renderer is of content model type ").concat(rendererModel === null || rendererModel === void 0 ? void 0 : rendererModel.contentModel, " which is incompatible with \"").concat(tnode.displayName, "\". The custom renderer will be ignored."));
      }

      return null;
    }

    return null;
  }

}

exports.default = RenderRegistry;
//# sourceMappingURL=RenderRegistry.js.map