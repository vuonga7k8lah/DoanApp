"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TTextRenderer;
exports.TDefaultTextRenderer = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _RenderRegistryProvider = require("./context/RenderRegistryProvider");

var _SharedPropsContext = require("./context/SharedPropsContext");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const TDefaultTextRenderer = ({
  tnode,
  textProps,
  onPress,
  children,
  style
}) => {
  const resolvedStyles = (textProps === null || textProps === void 0 ? void 0 : textProps.style) ? [style, textProps.style] : style;
  return /*#__PURE__*/_react.default.createElement(_reactNative.Text, _extends({
    onPress: onPress
  }, textProps, {
    style: resolvedStyles,
    testID: tnode.tagName || undefined
  }), children !== null && children !== void 0 ? children : tnode.data);
};

exports.TDefaultTextRenderer = TDefaultTextRenderer;

function TStandardTextRenderer({
  tnode,
  key,
  hasAnchorAncestor
}) {
  var _ref;

  const {
    Default,
    Custom
  } = (0, _RenderRegistryProvider.useRendererConfig)(tnode);
  const textProps = (0, _SharedPropsContext.useSharedTextProps)();
  const style = { ...tnode.styles.nativeBlockFlow,
    ...tnode.styles.nativeBlockRet,
    ...tnode.styles.nativeTextFlow,
    ...tnode.styles.nativeTextRet
  };
  const commonProps = {
    key: key,
    tnode: tnode,
    style,
    hasAnchorAncestor,
    textProps,
    viewProps: {},
    type: 'text',
    TDefaultRenderer: TDefaultTextRenderer,
    DefaultTagRenderer: Default || TDefaultTextRenderer
  };
  const Root = (_ref = Custom !== null && Custom !== void 0 ? Custom : Default) !== null && _ref !== void 0 ? _ref : TDefaultTextRenderer;
  return /*#__PURE__*/_react.default.createElement(Root, commonProps);
}

function TTextRenderer(props) {
  const InternalTextRenderer = (0, _RenderRegistryProvider.useInternalTextRenderer)(props.tnode);

  if (InternalTextRenderer) {
    return /*#__PURE__*/_react.default.createElement(InternalTextRenderer, {
      key: props.key
    });
  }

  return /*#__PURE__*/_react.default.createElement(TStandardTextRenderer, props);
}
//# sourceMappingURL=TTextRenderer.js.map