{"version":3,"sources":["useTRenderEngine.ts"],"names":["useTRenderEngine","props","allowedStyles","ignoredStyles","decodeEntities","baseStyle","classesStyles","tagsStyles","idsStyles","enableCSSInlineProcessing","enableUserAgentStyles","fallbackFonts","systemFonts","renderers","triggerTREInvalidationPropNames","isFontSupported","fontMap","forEach","font","fontFamily","tbuilderDeps","map","key","customizeHTMLModels","defaultModels","additionalModels","customRenderersKeys","Object","keys","length","renderer","model","HTMLElementModel","fromCustomModel","tagName","contentModel","HTMLContentModel","mixed","__DEV__","console","warn","error","TRenderEngine","cssProcessorConfig","inlinePropertiesBlacklist","inlinePropertiesWhitelist","htmlParserOptions","stylesConfig"],"mappings":"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","sourcesContent":["import { useMemo } from 'react';\nimport TRenderEngine, {\n  HTMLContentModel,\n  HTMLElementModel,\n  HTMLModelRecord,\n  TagName\n} from '@native-html/transient-render-engine';\nimport { RenderHTMLProps } from '../shared-types';\nimport { CustomRendererSpecs } from '../render/render-types';\nimport lookupRecord from '../helpers/lookupRecord';\n\nexport default function useTRenderEngine(props: RenderHTMLProps) {\n  const {\n    allowedStyles,\n    ignoredStyles,\n    decodeEntities,\n    baseStyle,\n    classesStyles,\n    tagsStyles,\n    idsStyles,\n    enableCSSInlineProcessing,\n    enableUserAgentStyles,\n    fallbackFonts,\n    systemFonts,\n    renderers = {},\n    triggerTREInvalidationPropNames\n  } = props;\n  const isFontSupported = useMemo(() => {\n    const fontMap = {} as Record<string, true>;\n    systemFonts!.forEach((font) => {\n      fontMap[font] = true;\n    });\n    return (fontFamily: string) => {\n      if (fallbackFonts![fontFamily as keyof typeof fallbackFonts]) {\n        return fallbackFonts![fontFamily as keyof typeof fallbackFonts];\n      }\n      return fontMap[fontFamily] || false;\n    };\n  }, [systemFonts, fallbackFonts]);\n  const tbuilderDeps = (triggerTREInvalidationPropNames || []).map(\n    (key) => props[key]\n  );\n  const customizeHTMLModels = (\n    defaultModels: HTMLModelRecord<TagName>\n  ): HTMLModelRecord<TagName> => {\n    const additionalModels: HTMLModelRecord<string> = {};\n    const customRenderersKeys = Object.keys(renderers) as Array<\n      keyof typeof renderers\n    >;\n    if (!customRenderersKeys.length) {\n      return defaultModels;\n    }\n    customRenderersKeys.forEach((key) => {\n      const renderer = renderers[key] as CustomRendererSpecs<HTMLContentModel>;\n      if (lookupRecord(defaultModels, key)) {\n        if (renderer.model && defaultModels[key] !== renderer.model) {\n          if (renderer.model instanceof HTMLElementModel) {\n            additionalModels[key] = renderer.model;\n          } else {\n            additionalModels[key] = HTMLElementModel.fromCustomModel({\n              ...renderer.model,\n              tagName: key as any\n            });\n          }\n        } else if (\n          !renderer.model &&\n          defaultModels[key].contentModel === HTMLContentModel.mixed\n        ) {\n          __DEV__ &&\n            console.warn(\n              `You are defining a custom renderer for tag \"${key}\" which has a mixed content model.` +\n                'Be advised that this tag can be translated to TBlock, TText or Tphrasing nodes. ' +\n                'You must explicitly set the corresponding HTMLElementModel from \"defaultHTMLElementModels\" ' +\n                'as a static \"model\" field of your renderer to show you understand the constrains inherent to ' +\n                'those renderers.'\n            );\n        }\n      } else {\n        if (renderer.model) {\n          additionalModels[key] = HTMLElementModel.fromCustomModel({\n            ...renderer.model,\n            tagName: key\n          });\n        } else {\n          __DEV__ &&\n            console.error(\n              `You must provide a model in custom renderer for tag \"${key}\". Set the \"model\" static field ` +\n                'of your custom renderer.'\n            );\n        }\n      }\n    });\n    return { ...defaultModels, ...additionalModels };\n  };\n  return useMemo(\n    () =>\n      new TRenderEngine({\n        customizeHTMLModels,\n        cssProcessorConfig: {\n          isFontSupported,\n          inlinePropertiesBlacklist: ignoredStyles,\n          inlinePropertiesWhitelist: allowedStyles\n        },\n        htmlParserOptions: {\n          decodeEntities\n        },\n        stylesConfig: {\n          baseStyle,\n          enableCSSInlineProcessing,\n          enableUserAgentStyles,\n          classesStyles,\n          idsStyles,\n          tagsStyles\n        }\n      }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [...tbuilderDeps, isFontSupported]\n  );\n}\n"]}