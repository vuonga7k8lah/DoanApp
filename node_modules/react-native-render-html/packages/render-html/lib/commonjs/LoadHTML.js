"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = LoadHTML;

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const ERROR_STATE = {
  error: true,
  loading: false,
  resolvedHTML: null
};

async function loadHTMLResource(uri) {
  const response = await fetch(uri);

  if (response.ok) {
    const html = await response.text();
    return {
      resolvedHTML: html,
      error: false,
      loading: false
    };
  }

  return ERROR_STATE;
}

function useLoader(props) {
  const {
    uri,
    html,
    onHTMLLoaded
  } = props;
  const [loadState, setState] = (0, _react.useState)({
    error: false,
    loading: false,
    resolvedHTML: html || null
  });
  const {
    error
  } = loadState; // Effect to reload on html changes

  (0, _react.useEffect)(() => {
    typeof html === 'string' && typeof uri !== 'string' && setState({
      error: false,
      loading: false,
      resolvedHTML: html
    });
  }, [html, uri]); // Effect to reload on uri changes

  (0, _react.useEffect)(() => {
    let cancelled = false;

    if (!error && uri) {
      setState({
        loading: true,
        error: false,
        resolvedHTML: null
      });
      loadHTMLResource(uri).then(state => {
        !cancelled && setState(state);
      }).catch(() => {
        !cancelled && setState(ERROR_STATE);
      });
    }

    return () => {
      cancelled = true;
    };
  }, [error, uri]);
  (0, _react.useEffect)(() => {
    loadState.resolvedHTML && (onHTMLLoaded === null || onHTMLLoaded === void 0 ? void 0 : onHTMLLoaded.call(null, loadState.resolvedHTML));
  }, [loadState.resolvedHTML, onHTMLLoaded]);
  return loadState;
}

const styles = _reactNative.StyleSheet.create({
  alignCenter: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center'
  },
  errorText: {
    fontStyle: 'italic',
    fontSize: 16
  }
});

function defaultRenderError(props) {
  return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: styles.alignCenter
  }, /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
    style: styles.errorText
  }, "Failed to load HTML from ", props.uri));
}

function defaultRenderLoading() {
  return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: styles.alignCenter
  }, /*#__PURE__*/_react.default.createElement(_reactNative.ActivityIndicator, null));
}

function LoadHTML(props) {
  const {
    remoteErrorView,
    remoteLoadingView,
    children
  } = props;
  const {
    resolvedHTML,
    error,
    loading
  } = useLoader(props);

  if (error) {
    return remoteErrorView.call(null, props);
  }

  if (loading) {
    return remoteLoadingView.call(null, props);
  }

  return (children === null || children === void 0 ? void 0 : children.call(null, resolvedHTML)) || null;
}

LoadHTML.defaultProps = {
  remoteErrorView: defaultRenderError,
  remoteLoadingView: defaultRenderLoading
};
//# sourceMappingURL=LoadHTML.js.map