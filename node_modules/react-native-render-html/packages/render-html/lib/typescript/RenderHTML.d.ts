import React from 'react';
import { RenderHTMLProps } from './shared-types';
export declare type RenderHTMLPropTypes = Record<keyof RenderHTMLProps, any>;
declare function RenderHTML(props: RenderHTMLProps): JSX.Element;
declare namespace RenderHTML {
    var defaultProps: {
        html?: string | undefined;
        renderers?: Record<string, (React.ComponentClass<import("./shared-types").CustomTagRendererProps<import("@native-html/transient-render-engine").TBlock>, any> & Partial<import(".").CustomRendererSpecs<import("@native-html/transient-render-engine/lib/typescript/model/HTMLContentModel").default.block>>) | (React.FunctionComponent<import("./shared-types").CustomTagRendererProps<import("@native-html/transient-render-engine").TBlock>> & Partial<import(".").CustomRendererSpecs<import("@native-html/transient-render-engine/lib/typescript/model/HTMLContentModel").default.block>>) | (React.ComponentClass<import("./shared-types").CustomTagRendererProps<import("@native-html/transient-render-engine").TText | import("@native-html/transient-render-engine").TPhrasing>, any> & Partial<import(".").CustomRendererSpecs<import("@native-html/transient-render-engine/lib/typescript/model/HTMLContentModel").default.textual>>) | (React.FunctionComponent<import("./shared-types").CustomTagRendererProps<import("@native-html/transient-render-engine").TText | import("@native-html/transient-render-engine").TPhrasing>> & Partial<import(".").CustomRendererSpecs<import("@native-html/transient-render-engine/lib/typescript/model/HTMLContentModel").default.textual>>) | (React.ComponentClass<import("./shared-types").CustomTagRendererProps<import("@native-html/transient-render-engine").TBlock | import("@native-html/transient-render-engine").TText | import("@native-html/transient-render-engine").TPhrasing>, any> & Partial<import(".").CustomRendererSpecs<import("@native-html/transient-render-engine/lib/typescript/model/HTMLContentModel").default.mixed>>) | (React.FunctionComponent<import("./shared-types").CustomTagRendererProps<import("@native-html/transient-render-engine").TBlock | import("@native-html/transient-render-engine").TText | import("@native-html/transient-render-engine").TPhrasing>> & Partial<import(".").CustomRendererSpecs<import("@native-html/transient-render-engine/lib/typescript/model/HTMLContentModel").default.mixed>>) | import(".").CustomLiteRenderer<any>> | undefined;
        renderersProps?: any;
        uri?: string | undefined;
        containerStyle?: import("react-native").StyleProp<import("react-native").ViewStyle>;
        customWrapper?: ((innerNodes: React.ReactNode) => React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>) | undefined;
        remoteLoadingView?: ((props: RenderHTMLProps<any>) => React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>) | undefined;
        remoteErrorView?: ((props: RenderHTMLProps<any>) => React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>) | undefined;
        emSize?: number | undefined;
        ptSize?: number | undefined;
        onTTreeChange?: ((ttree: import("@native-html/transient-render-engine").TNode) => void) | undefined;
        onHTMLLoaded?: ((html: string) => void) | undefined;
        systemFonts?: string[] | undefined;
        fallbackFonts?: import("./shared-types").FallbackFontsDefinitions | undefined;
        triggerTREInvalidationPropNames?: ("decodeEntities" | "enableUserAgentStyles" | "enableCSSInlineProcessing" | "tagsStyles" | "classesStyles" | "idsStyles" | "baseStyle" | "alterData" | "alterChildren" | "alterNode" | "ignoreNode" | "ignoredTags" | "allowedStyles" | "ignoredStyles")[] | undefined;
        allowFontScaling?: boolean | undefined;
        listsPrefixesRenderers?: import("./shared-types").RendererDictionary<any> | undefined;
        staticContentMaxWidth?: number | undefined;
        imagesInitialDimensions?: import("./shared-types").ImageDimensions | undefined;
        contentWidth?: number | undefined;
        computeImagesMaxWidth?: ((contentWidth: number) => number) | undefined;
        enableExperimentalPercentWidth?: boolean | undefined;
        enableExperimentalMarginCollapsing?: boolean | undefined;
        onLinkPress?: ((event: import("react-native").GestureResponderEvent, href: string, htmlAttribs: import("./shared-types").HtmlAttributesDictionary) => void) | undefined;
        textSelectable?: boolean | undefined;
        debug?: boolean | undefined;
        decodeEntities?: boolean | undefined;
        enableUserAgentStyles?: boolean | undefined;
        enableCSSInlineProcessing?: boolean | undefined;
        tagsStyles?: Readonly<Record<string, import("@native-html/css-processor").MixedStyleDeclaration>> | undefined;
        classesStyles?: Readonly<Record<string, import("@native-html/css-processor").MixedStyleDeclaration>> | undefined;
        idsStyles?: Readonly<Record<string, import("@native-html/css-processor").MixedStyleDeclaration>> | undefined;
        baseStyle?: import("@native-html/css-processor").MixedStyleDeclaration | undefined;
        alterData?: ((node: import("domhandler").Text) => string | false | void | null | undefined) | undefined;
        alterChildren?: ((node: import("domhandler").Element) => false | void | import("domhandler").Node[] | null | undefined) | undefined;
        alterNode?: ((node: import("domhandler").Element) => false | void | import("domhandler").Node | null | undefined) | undefined;
        ignoreNode?: ((node: import("domhandler").Node, parentTagName: string) => boolean | null | undefined) | undefined;
        ignoredTags?: string[] | undefined;
        allowedStyles?: import("@native-html/css-processor").CSSPropertyNameList | undefined;
        ignoredStyles?: import("@native-html/css-processor").CSSPropertyNameList | undefined;
    };
    var propTypes: Record<"decodeEntities" | "enableUserAgentStyles" | "enableCSSInlineProcessing" | "tagsStyles" | "classesStyles" | "idsStyles" | "baseStyle" | "alterData" | "alterChildren" | "alterNode" | "ignoreNode" | "ignoredTags" | "allowedStyles" | "ignoredStyles" | "allowFontScaling" | "listsPrefixesRenderers" | "staticContentMaxWidth" | "imagesInitialDimensions" | "contentWidth" | "computeImagesMaxWidth" | "enableExperimentalPercentWidth" | "enableExperimentalMarginCollapsing" | "onLinkPress" | "textSelectable" | "debug" | "html" | "renderers" | "fallbackFonts" | "systemFonts" | "triggerTREInvalidationPropNames" | "onTTreeChange" | "uri" | "onHTMLLoaded" | "remoteErrorView" | "remoteLoadingView" | "renderersProps" | "containerStyle" | "customWrapper" | "emSize" | "ptSize", any>;
}
export default RenderHTML;
